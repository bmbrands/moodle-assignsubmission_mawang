define("assignsubmission_mawang/fieldmanager",["./repository","core/templates"],(function(_repository,_templates){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}_repository=_interopRequireDefault(_repository),_templates=_interopRequireDefault(_templates);new class{constructor(){_defineProperty(this,"fields",[]),_defineProperty(this,"fieldtypes",[]),this.renderFields();document.querySelector('[data-region="mawang-fieldmanager"]').addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))}))}async actions(btn){const actionMap={"add-field":this.addField,"save-fields":this.saveFields,"delete-field":this.deleteField},action=btn.dataset.action;actionMap[action]&&actionMap[action].call(this,btn)}getFieldsFromUI(){const rootElement=document.querySelector('[data-region="mawang-fieldmanager"]');if(!rootElement)throw new Error("FieldManager root element not found.");const fieldCards=rootElement.querySelectorAll('[data-region="field"]');if(0===fieldCards.length)throw new Error("No fields containers found.");const fields=[];if(fieldCards.forEach((card=>{const fieldid=card.dataset.fieldid,nameInput=card.querySelector('input[name="fieldname"]'),typeSelect=card.querySelector('select[name="fieldtype"]');if(!nameInput||!typeSelect)throw new Error("Field name or type input not found in the field card.");{const field={id:fieldid?parseInt(fieldid,10):null,name:nameInput.value.trim(),type:typeSelect.value,deleted:1==card.dataset.deleted};fields.push(field)}})),0===fields.length)throw new Error("No valid fields found in the UI.");return fields}async saveFields(){const rootElement=document.querySelector('[data-region="mawang-fieldmanager"]');if(!rootElement)throw new Error("FieldManager root element not found.");const args={assignmentid:rootElement.dataset.assignmentid,fields:this.getFieldsFromUI()},response=await _repository.default.updateFields(args);if(!response)throw new Error("Failed to save fields.");this.fields=response.fields||[],this.fieldtypes=response.fieldtypes||[],await this.renderFields()}async addField(){this.fields.push({name:"",type:"text"}),this.renderFields()}async deleteField(btn){const fieldCard=btn.closest('[data-region="field"]');if(!fieldCard)throw new Error("Field card not found.");const fieldId=fieldCard.dataset.fieldid;if(!fieldId)throw new Error("Field ID not found.");this.fields.forEach((field=>{field.id&&field.id.toString()===fieldId&&(field.deleted=!0)})),await this.renderFields()}async getFields(){const rootElement=document.querySelector('[data-region="mawang-fieldmanager"]');if(!rootElement)throw new Error("FieldManager root element not found.");const args={assignmentid:rootElement.dataset.assignmentid},response=await _repository.default.getFields(args);response&&(this.fields=response.fields||[],this.fieldtypes=response.fieldtypes||[])}async parseFields(){0==this.fields.length&&await this.getFields(),this.fields.forEach((field=>{const fieldtypes=this.fieldtypes.map((type=>structuredClone(type)));fieldtypes.forEach((type=>{type.selected=type.name===field.type})),fieldtypes.some((type=>type.name===field.type))||(fieldtypes[0].selected=!0),field.fieldtypes=fieldtypes}))}async renderFields(){await this.parseFields();const rootElement=document.querySelector('[data-region="mawang-fieldmanager"] [data-region="fields-container"]');if(!rootElement)throw new Error("FieldManager root element not found.");const{html:html,js:js}=await _templates.default.renderForPromise("assignsubmission_mawang/fields",{fields:this.fields});_templates.default.replaceNodeContents(rootElement,html,js)}}}));

//# sourceMappingURL=fieldmanager.min.js.map