define("assignsubmission_mawang/fieldmanager",["core/templates"],(function(_templates){var e;
/**
   * TODO describe module fieldmanager
   *
   * @module     assignsubmission_mawang/fieldmanager
   * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */_templates=(e=_templates)&&e.__esModule?e:{default:e};new class{fields=[];fieldtypes=[];constructor(){const rootElement=document.querySelector('[data-region="mawang-fieldmanager"]'),form=document.querySelector('form[action="modedit.php"]'),fieldtypesInput=document.querySelector('[name="assignsubmission_mawang_fieldtypes"]');if(!rootElement||!form||!fieldtypesInput)throw new Error("Required elements not found in the DOM.");try{this.fieldtypes=JSON.parse(fieldtypesInput.value)}catch(e){throw new Error("Failed to parse fieldtypes from input value: "+e.message)}this.renderFields(),rootElement.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),form.addEventListener("input",(async e=>{e.target.closest(".mawang-fieldmanager input")&&await this.saveFields(),e.target.closest(".mawang-fieldmanager select")&&await this.saveFields()}))}async actions(btn){const actionMap={"add-field":this.addField,"save-fields":this.saveFields,"delete-field":this.deleteField},action=btn.dataset.action;actionMap[action]&&actionMap[action].call(this,btn)}setConfig(fields){const config=document.querySelector('[name="assignsubmission_mawang_config"]');if(!config)throw new Error("Configuration input not found.");config.value=JSON.stringify(fields)}getConfig(){const config=document.querySelector('[name="assignsubmission_mawang_config"]');if(!config)throw new Error("Configuration input not found.");if(!config.value)return void this.addField();const fields=JSON.parse(config.value);fields&&Array.isArray(fields)&&0!==fields.length?this.fields=fields:this.addField()}getFieldsFromUI(){const rootElement=document.querySelector('[data-region="mawang-fieldmanager"]');if(!rootElement)throw new Error("FieldManager root element not found.");const fieldCards=rootElement.querySelectorAll('[data-region="field"]');if(0===fieldCards.length)return[];const fields=[];if(fieldCards.forEach((card=>{const fieldid=card.dataset.fieldid,nameInput=card.querySelector('input[name="fieldname"]'),typeSelect=card.querySelector('select[name="fieldtype"]'),requiredCheckbox=card.querySelector('input[name="fieldrequired"]');if(!nameInput||!typeSelect)throw new Error("Field name or type input not found in the field card.");{const field={id:fieldid?parseInt(fieldid,10):null,name:nameInput.value.trim(),type:typeSelect.value,required:requiredCheckbox.checked,deleted:1==card.dataset.deleted};fields.push(field)}})),0===fields.length)throw new Error("No valid fields found in the UI.");return fields}async saveFields(){if(!document.querySelector('[data-region="mawang-fieldmanager"]'))throw new Error("FieldManager root element not found.");this.fields=this.getFieldsFromUI(),this.setConfig(this.fields)}async addField(){await this.saveFields();this.fields.push({name:"",type:"textarea"}),this.renderFields()}async deleteField(btn){const fieldCard=btn.closest('[data-region="field"]');if(!fieldCard)throw new Error("Field card not found.");const fieldId=fieldCard.dataset.fieldid;if(!fieldId)throw new Error("Field ID not found.");this.fields=this.fields.filter((field=>field.id!==parseInt(fieldId,10))),await this.renderFields()}async parseFields(){0==this.fields.length&&this.getConfig();let fieldcount=0;this.fields.forEach((field=>{field.id=++fieldcount;const fieldtypes=this.fieldtypes.map((type=>structuredClone(type)));fieldtypes.forEach((type=>{type.selected=type.name===field.type})),fieldtypes.some((type=>type.name===field.type))||(fieldtypes[0].selected=!0),field.fieldtypes=fieldtypes}))}async renderFields(){await this.parseFields();const rootElement=document.querySelector('[data-region="mawang-fieldmanager"] [data-region="fields-container"]');if(!rootElement)throw new Error("FieldManager root element not found.");const{html:html,js:js}=await _templates.default.renderForPromise("assignsubmission_mawang/fields",{fields:this.fields});_templates.default.replaceNodeContents(rootElement,html,js)}}}));

//# sourceMappingURL=fieldmanager.min.js.map