{"version":3,"file":"mawang.min.js","sources":["../src/mawang.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module mawang\n *\n * @module     assignsubmission_mawang/mawang\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport Repository from './repository';\nimport $ from 'jquery';\nimport {debounce} from 'core/utils';\n\nconst DEBOUNCE_TIMER = 2000;\n\nclass Mawang {\n    constructor() {\n        this.rootElement = document.querySelector('.mawang-form');\n        this.init();\n    }\n\n    async init() {\n        const textareas = this.rootElement.querySelectorAll('textarea');\n        // Create a new <div> with a word counter after each textarea, give it the id of the textarea + '-wordcounter'\n        textareas.forEach(async(textarea) => {\n            const areaid = textarea.dataset.fieldid + '-wordcounter';\n            const statusid = textarea.dataset.fieldid + '-status';\n            const count = textarea.value.split(/\\s+/).filter((word) => word.length > 0).length;\n            const {html, js} = await Templates.renderForPromise('assignsubmission_mawang/fieldactions',\n                {areaid: areaid, statusid: statusid, count: count});\n            Templates.appendNodeContents(textarea.parentNode, html, js);\n        });\n        this.bindEvents();\n\n    }\n\n    async bindEvents() {\n        // Bind events here\n        const textareas = this.rootElement.querySelectorAll('textarea');\n        const saveDraftDebounce = debounce(this.saveDraft, DEBOUNCE_TIMER);\n\n        textareas.forEach(async(textarea) => {\n            textarea.addEventListener('input', async(event) => {\n                const wordCounter = document.getElementById(event.target.dataset.fieldid + '-wordcounter');\n                const count = event.target.value.split(/\\s+/).filter((word) => word.length > 0).length;\n                wordCounter.innerHTML = await getString('words', 'assignsubmission_mawang', count);\n                saveDraftDebounce(event.target);\n            });\n        });\n        document.addEventListener('click', async(event) => {\n            const popOvers = document.querySelectorAll('[data-toggle=\"popover\"]');\n            const currentPopover = event.target.closest('[data-toggle=\"popover\"]');\n            if (popOvers.length > 0) {\n                popOvers.forEach((popover) => {\n                    if (popover !== currentPopover) {\n                        $(popover).popover('hide');\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Save a draft of the field.\n     * @param {HTMLElement} field The field to save.\n     */\n    async saveDraft(field) {\n        const statusdiv = document.getElementById(field.dataset.fieldid + '-status');\n        statusdiv.classList.add('saving');\n\n        const data = {\n            assignmentid: parseInt(field.dataset.assignmentid),\n            fieldid: parseInt(field.dataset.fieldid),\n            value: field.value,\n        };\n        const response = await Repository.storeDraft(data);\n        if (response) {\n            statusdiv.classList.remove('saving');\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n */\nconst init = () => {\n    new Mawang();\n};\n\nexport default {\n    init: init,\n};"],"names":["Mawang","constructor","rootElement","document","querySelector","init","this","querySelectorAll","forEach","async","areaid","textarea","dataset","fieldid","statusid","count","value","split","filter","word","length","html","js","Templates","renderForPromise","appendNodeContents","parentNode","bindEvents","textareas","saveDraftDebounce","saveDraft","addEventListener","wordCounter","getElementById","event","target","innerHTML","popOvers","currentPopover","closest","popover","field","statusdiv","classList","add","data","assignmentid","parseInt","Repository","storeDraft","remove"],"mappings":";;;;;;;iOA+BMA,OACFC,mBACSC,YAAcC,SAASC,cAAc,qBACrCC,oBAIaC,KAAKJ,YAAYK,iBAAiB,YAE1CC,SAAQC,MAAAA,iBACRC,OAASC,SAASC,QAAQC,QAAU,eACpCC,SAAWH,SAASC,QAAQC,QAAU,UACtCE,MAAQJ,SAASK,MAAMC,MAAM,OAAOC,QAAQC,MAASA,KAAKC,OAAS,IAAGA,QACtEC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,uCAChD,CAACd,OAAQA,OAAQI,SAAUA,SAAUC,MAAOA,2BACtCU,mBAAmBd,SAASe,WAAYL,KAAMC,YAEvDK,sCAMCC,UAAYtB,KAAKJ,YAAYK,iBAAiB,YAC9CsB,mBAAoB,mBAASvB,KAAKwB,UA1BzB,KA4BfF,UAAUpB,SAAQC,MAAAA,WACdE,SAASoB,iBAAiB,SAAStB,MAAAA,cACzBuB,YAAc7B,SAAS8B,eAAeC,MAAMC,OAAOvB,QAAQC,QAAU,gBACrEE,MAAQmB,MAAMC,OAAOnB,MAAMC,MAAM,OAAOC,QAAQC,MAASA,KAAKC,OAAS,IAAGA,OAChFY,YAAYI,gBAAkB,kBAAU,QAAS,0BAA2BrB,OAC5Ec,kBAAkBK,MAAMC,cAGhChC,SAAS4B,iBAAiB,SAAStB,MAAAA,cACzB4B,SAAWlC,SAASI,iBAAiB,2BACrC+B,eAAiBJ,MAAMC,OAAOI,QAAQ,2BACxCF,SAASjB,OAAS,GAClBiB,SAAS7B,SAASgC,UACVA,UAAYF,oCACVE,SAASA,QAAQ,8BAWvBC,aACNC,UAAYvC,SAAS8B,eAAeQ,MAAM7B,QAAQC,QAAU,WAClE6B,UAAUC,UAAUC,IAAI,gBAElBC,KAAO,CACTC,aAAcC,SAASN,MAAM7B,QAAQkC,cACrCjC,QAASkC,SAASN,MAAM7B,QAAQC,SAChCG,MAAOyB,MAAMzB,aAEMgC,oBAAWC,WAAWJ,OAEzCH,UAAUC,UAAUO,OAAO,wBAcxB,CACX7C,KALS,SACLL"}