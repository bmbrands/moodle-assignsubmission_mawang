{"version":3,"file":"fieldmanager.min.js","sources":["../src/fieldmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module fieldmanager\n *\n * @module     assignsubmission_mawang/fieldmanager\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\n\n/**\n * The FieldManager class provides methods to manage fields in the Mawang repository.\n * It allows for fetching and updating field data.\n */\nclass FieldManager {\n\n    /**\n     * The fields data.\n     * @type {Array}\n     */\n    fields = [];\n\n    /**\n     * The field types available in the Mawang repository.\n     * @type {Array}\n     */\n    fieldtypes = [];\n\n    /**\n     * Initializes the FieldManager.\n     */\n    constructor() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        const form = document.querySelector('form[action=\"modedit.php\"]');\n        const fieldtypesInput = document.querySelector('[name=\"assignsubmission_mawang_fieldtypes\"]');\n        if (!rootElement || !form || !fieldtypesInput) {\n            throw new Error('Required elements not found in the DOM.');\n        }\n        // Parse the fieldtypes from the input value.\n        try {\n            this.fieldtypes = JSON.parse(fieldtypesInput.value);\n        } catch (e) {\n            throw new Error('Failed to parse fieldtypes from input value: ' + e.message);\n        }\n        this.renderFields();\n\n        rootElement.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        form.addEventListener('input', async(e) => {\n            let input = e.target.closest('.mawang-fieldmanager input');\n            if (input) {\n                // If the input is a field name, we need to save the fields.\n                await this.saveFields();\n            }\n            let select = e.target.closest('.mawang-fieldmanager select');\n            if (select) {\n                // If the select is a field type, we need to save the fields.\n                await this.saveFields();\n            }\n        });\n    }\n\n    /**\n     * Actions to be performed when a button is clicked.\n     * @param {HTMLElement} btn The button that was clicked.\n     * @returns {Promise<void>} A promise that resolves when the action is complete.\n     */\n    async actions(btn) {\n        const actionMap = {\n            'add-field': this.addField,\n            'save-fields': this.saveFields,\n            'delete-field': this.deleteField,\n        };\n        const action = btn.dataset.action;\n        if (actionMap[action]) {\n            actionMap[action].call(this, btn);\n        }\n    }\n\n    /**\n     * Set the configuration for the field manager.\n     * @param {Object} fields The configuration object.\n     */\n    setConfig(fields) {\n        const config = document.querySelector('[name=\"assignsubmission_mawang_config\"]');\n        if (!config) {\n            throw new Error('Configuration input not found.');\n        }\n        // Convert the fields array to a JSON string and set it as the value of the config input.\n        config.value = JSON.stringify(fields);\n    }\n\n    /**\n     * Get the configuration for the field manager.\n     * @returns {Object} fields The configuration object.\n     */\n    getConfig() {\n        const config = document.querySelector('[name=\"assignsubmission_mawang_config\"]');\n        if (!config) {\n            throw new Error('Configuration input not found.');\n        }\n        if (!config.value) {\n            this.addField(); // If no config value, add a new field.\n            return;\n        }\n        // Parse the JSON string from the config input and return it as an object.\n        const fields = JSON.parse(config.value);\n        if (!fields || !Array.isArray(fields) || fields.length === 0) {\n            this.addField();\n        } else {\n            this.fields = fields;\n        }\n    }\n\n    /**\n     * Fetch the field data from the UI\n     */\n    getFieldsFromUI() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n        const fieldCards = rootElement.querySelectorAll('[data-region=\"field\"]');\n        if (fieldCards.length === 0) {\n            return []; // No fields found, return an empty array.\n        }\n        // Collect the fields data from the UI.\n        const fields = [];\n        fieldCards.forEach((card) => {\n            const fieldid = card.dataset.fieldid;\n            const nameInput = card.querySelector('input[name=\"fieldname\"]');\n            const typeSelect = card.querySelector('select[name=\"fieldtype\"]');\n            if (nameInput && typeSelect) {\n                const field = {\n                    id: fieldid ? parseInt(fieldid, 10) : null,\n                    name: nameInput.value.trim(),\n                    type: typeSelect.value,\n                    deleted: card.dataset.deleted == 1 ? true : false,\n                };\n                fields.push(field);\n            } else {\n                throw new Error('Field name or type input not found in the field card.');\n            }\n        });\n        if (fields.length === 0) {\n            throw new Error('No valid fields found in the UI.');\n        }\n        return fields;\n    }\n\n    /**\n     * Saves the fields to the Mawang repository.\n     * @returns {Promise<void>} A promise that resolves when the fields are saved.\n     */\n    async saveFields() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n        this.fields = this.getFieldsFromUI();\n        this.setConfig(this.fields); // Set the configuration with the current fields.\n        return; // No need to save fields if assignment ID is -1.\n    }\n\n    /**\n     * Adds a new field to the Mawang repository.\n     * @returns {Promise<void>} A promise that resolves when the field is added.\n     */\n    async addField() {\n        await this.saveFields(); // Save existing fields before adding a new one.\n        const newField = {\n            name: '',\n            type: 'textarea',\n        };\n\n        this.fields.push(newField);\n        this.renderFields();\n    }\n\n    /**\n     * Deletes a field from the Mawang repository.\n     * @param {HTMLElement} btn The button that was clicked to delete the field.\n     * @returns {Promise<void>} A promise that resolves when the field is deleted.\n     */\n    async deleteField(btn) {\n        const fieldCard = btn.closest('[data-region=\"field\"]');\n        if (!fieldCard) {\n            throw new Error('Field card not found.');\n        }\n        const fieldId = fieldCard.dataset.fieldid;\n        if (!fieldId) {\n            throw new Error('Field ID not found.');\n        }\n\n        // Remove the field from the fields array.\n        this.fields = this.fields.filter(field => field.id !== parseInt(fieldId, 10));\n        // Re-render the fields.\n        await this.renderFields();\n    }\n\n    /**\n     * Parse the fetched fields data, add the fieldtypes to each field and set the selected type.\n     * @returns {Promise<void>} A promise that resolves when the fields are parsed.\n     */\n    async parseFields() {\n        if (this.fields.length == 0) {\n            this.getConfig();\n        }\n        let fieldcount = 0;\n        // Create a copy of the fieldtypes to avoid modifying the original array.\n        this.fields.forEach((field) => {\n            field.id = ++fieldcount; // Assign a unique ID to each field.\n            const fieldtypes = this.fieldtypes.map(type => structuredClone(type));\n            // Add the selected attribute to the fieldtypes.\n            fieldtypes.forEach((type) => {\n                type.selected = type.name === field.type;\n            });\n            if (!fieldtypes.some(type => type.name === field.type)) {\n                fieldtypes[0].selected = true;\n            }\n            field.fieldtypes = fieldtypes;\n        });\n    }\n\n\n    /**\n     * Renders the fields\n     */\n    async renderFields() {\n        await this.parseFields();\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"] [data-region=\"fields-container\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n\n        const {html, js} = await Templates.renderForPromise('assignsubmission_mawang/fields', {\n            fields: this.fields,\n        });\n        Templates.replaceNodeContents(rootElement, html, js);\n    }\n}\n\nnew FieldManager();\n"],"names":["constructor","rootElement","document","querySelector","form","fieldtypesInput","Error","fieldtypes","JSON","parse","value","e","message","renderFields","addEventListener","btn","target","closest","preventDefault","actions","async","this","saveFields","actionMap","addField","deleteField","action","dataset","call","setConfig","fields","config","stringify","getConfig","Array","isArray","length","getFieldsFromUI","fieldCards","querySelectorAll","forEach","card","fieldid","nameInput","typeSelect","field","id","parseInt","name","trim","type","deleted","push","fieldCard","fieldId","filter","fieldcount","map","structuredClone","selected","some","parseFields","html","js","Templates","renderForPromise","replaceNodeContents"],"mappings":"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"}