{"version":3,"file":"fieldmanager.min.js","sources":["../src/fieldmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module fieldmanager\n *\n * @module     assignsubmission_mawang/fieldmanager\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Repository from './repository';\nimport Templates from 'core/templates';\n\n/**\n * The FieldManager class provides methods to manage fields in the Mawang repository.\n * It allows for fetching and updating field data.\n */\nclass FieldManager {\n\n    /**\n     * The fields data.\n     * @type {Array}\n     */\n    fields = [];\n\n    /**\n     * The field types available in the Mawang repository.\n     * @type {Array}\n     */\n    fieldtypes = [];\n\n    /**\n     * Initializes the FieldManager.\n     */\n    constructor() {\n        this.renderFields();\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        rootElement.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n    }\n\n    /**\n     * Actions to be performed when a button is clicked.\n     * @param {HTMLElement} btn The button that was clicked.\n     * @returns {Promise<void>} A promise that resolves when the action is complete.\n     */\n    async actions(btn) {\n        const actionMap = {\n            'add-field': this.addField,\n            'save-fields': this.saveFields,\n            'delete-field': this.deleteField,\n        };\n        const action = btn.dataset.action;\n        if (actionMap[action]) {\n            actionMap[action].call(this, btn);\n        }\n    }\n\n    /**\n     * Fetch the field data from the UI\n     */\n    getFieldsFromUI() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n        const fieldCards = rootElement.querySelectorAll('[data-region=\"field\"]');\n        if (fieldCards.length === 0) {\n            throw new Error('No fields containers found.');\n        }\n        // Collect the fields data from the UI.\n        const fields = [];\n        fieldCards.forEach((card) => {\n            const fieldid = card.dataset.fieldid;\n            const nameInput = card.querySelector('input[name=\"fieldname\"]');\n            const typeSelect = card.querySelector('select[name=\"fieldtype\"]');\n            if (nameInput && typeSelect) {\n                const field = {\n                    id: fieldid ? parseInt(fieldid, 10) : null,\n                    name: nameInput.value.trim(),\n                    type: typeSelect.value,\n                    deleted: card.dataset.deleted == 1 ? true : false,\n                };\n                fields.push(field);\n            } else {\n                throw new Error('Field name or type input not found in the field card.');\n            }\n        });\n        if (fields.length === 0) {\n            throw new Error('No valid fields found in the UI.');\n        }\n        return fields;\n    }\n\n    /**\n     * Saves the fields to the Mawang repository.\n     * @returns {Promise<void>} A promise that resolves when the fields are saved.\n     */\n    async saveFields() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n        const args = {\n            assignmentid: rootElement.dataset.assignmentid,\n            fields: this.getFieldsFromUI(),\n        };\n        const response = await Repository.updateFields(args);\n        if (response) {\n            this.fields = response.fields || [];\n            this.fieldtypes = response.fieldtypes || [];\n            await this.renderFields();\n        } else {\n            throw new Error('Failed to save fields.');\n        }\n    }\n\n    /**\n     * Adds a new field to the Mawang repository.\n     * @returns {Promise<void>} A promise that resolves when the field is added.\n     */\n    async addField() {\n        await this.saveFields(); // Save existing fields before adding a new one.\n        const newField = {\n            name: '',\n            type: 'textarea',\n        };\n\n        this.fields.push(newField);\n        this.renderFields();\n    }\n\n    /**\n     * Deletes a field from the Mawang repository.\n     * @param {HTMLElement} btn The button that was clicked to delete the field.\n     * @returns {Promise<void>} A promise that resolves when the field is deleted.\n     */\n    async deleteField(btn) {\n        const fieldCard = btn.closest('[data-region=\"field\"]');\n        if (!fieldCard) {\n            throw new Error('Field card not found.');\n        }\n        const fieldId = fieldCard.dataset.fieldid;\n        if (!fieldId) {\n            throw new Error('Field ID not found.');\n        }\n\n        // Remove the field from the fields array.\n        this.fields.forEach((field) => {\n            if (field.id && field.id.toString() === fieldId) {\n                field.deleted = true; // Mark the field for deletion.\n            }\n        });\n        // Re-render the fields.\n        await this.renderFields();\n    }\n\n    /**\n     * Fetches the fields from the Mawang repository.\n     *\n     * @returns {Promise<Object>} A promise that resolves with the fields data.\n     */\n    async getFields() {\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n\n        const args = {\n            assignmentid: rootElement.dataset.assignmentid,\n        };\n        const response = await Repository.getFields(args);\n        if (response) {\n            this.fields = response.fields || [];\n            this.fieldtypes = response.fieldtypes || [];\n        }\n    }\n\n    /**\n     * Parse the fetched fields data, add the fieldtypes to each field and set the selected type.\n     * @returns {Promise<void>} A promise that resolves when the fields are parsed.\n     */\n    async parseFields() {\n        if (this.fields.length == 0) {\n            await this.getFields();\n        }\n        // Create a copy of the fieldtypes to avoid modifying the original array.\n        this.fields.forEach((field) => {\n            const fieldtypes = this.fieldtypes.map(type => structuredClone(type));\n            // Add the selected attribute to the fieldtypes.\n            fieldtypes.forEach((type) => {\n                type.selected = type.name === field.type;\n            });\n            if (!fieldtypes.some(type => type.name === field.type)) {\n                fieldtypes[0].selected = true;\n            }\n            field.fieldtypes = fieldtypes;\n        });\n    }\n\n\n    /**\n     * Renders the fields\n     */\n    async renderFields() {\n        await this.parseFields();\n        const rootElement = document.querySelector('[data-region=\"mawang-fieldmanager\"] [data-region=\"fields-container\"]');\n        if (!rootElement) {\n            throw new Error('FieldManager root element not found.');\n        }\n\n        const {html, js} = await Templates.renderForPromise('assignsubmission_mawang/fields', {\n            fields: this.fields,\n        });\n        Templates.replaceNodeContents(rootElement, html, js);\n    }\n}\n\nnew FieldManager();\n"],"names":["constructor","renderFields","document","querySelector","addEventListener","e","btn","target","closest","preventDefault","actions","actionMap","this","addField","saveFields","deleteField","action","dataset","call","getFieldsFromUI","rootElement","Error","fieldCards","querySelectorAll","length","fields","forEach","card","fieldid","nameInput","typeSelect","field","id","parseInt","name","value","trim","type","deleted","push","args","assignmentid","response","Repository","updateFields","fieldtypes","fieldCard","fieldId","toString","getFields","map","structuredClone","selected","some","parseFields","html","js","Templates","renderForPromise","replaceNodeContents"],"mappings":"gdA+CIA,4CAXS,sCAMI,SAMJC,eACeC,SAASC,cAAc,uCAC/BC,iBAAiB,SAAUC,QAC/BC,IAAMD,EAAEE,OAAOC,QAAQ,iBACvBF,MACAD,EAAEI,sBACGC,QAAQJ,uBAUXA,WACJK,UAAY,aACDC,KAAKC,uBACHD,KAAKE,0BACJF,KAAKG,aAEnBC,OAASV,IAAIW,QAAQD,OACvBL,UAAUK,SACVL,UAAUK,QAAQE,KAAKN,KAAMN,KAOrCa,wBACUC,YAAclB,SAASC,cAAc,2CACtCiB,kBACK,IAAIC,MAAM,8CAEdC,WAAaF,YAAYG,iBAAiB,4BACtB,IAAtBD,WAAWE,aACL,IAAIH,MAAM,qCAGdI,OAAS,MACfH,WAAWI,SAASC,aACVC,QAAUD,KAAKV,QAAQW,QACvBC,UAAYF,KAAKxB,cAAc,2BAC/B2B,WAAaH,KAAKxB,cAAc,gCAClC0B,YAAaC,iBASP,IAAIT,MAAM,yDATS,OACnBU,MAAQ,CACVC,GAAIJ,QAAUK,SAASL,QAAS,IAAM,KACtCM,KAAML,UAAUM,MAAMC,OACtBC,KAAMP,WAAWK,MACjBG,QAAiC,GAAxBX,KAAKV,QAAQqB,SAE1Bb,OAAOc,KAAKR,WAKE,IAAlBN,OAAOD,aACD,IAAIH,MAAM,2CAEbI,gCAQDL,YAAclB,SAASC,cAAc,2CACtCiB,kBACK,IAAIC,MAAM,8CAEdmB,KAAO,CACTC,aAAcrB,YAAYH,QAAQwB,aAClChB,OAAQb,KAAKO,mBAEXuB,eAAiBC,oBAAWC,aAAaJ,UAC3CE,eAKM,IAAIrB,MAAM,+BAJXI,OAASiB,SAASjB,QAAU,QAC5BoB,WAAaH,SAASG,YAAc,SACnCjC,KAAKX,sCAWTW,KAAKE,kBAMNW,OAAOc,KALK,CACbL,KAAM,GACNG,KAAM,kBAILpC,iCAQSK,WACRwC,UAAYxC,IAAIE,QAAQ,6BACzBsC,gBACK,IAAIzB,MAAM,+BAEd0B,QAAUD,UAAU7B,QAAQW,YAC7BmB,cACK,IAAI1B,MAAM,4BAIfI,OAAOC,SAASK,QACbA,MAAMC,IAAMD,MAAMC,GAAGgB,aAAeD,UACpChB,MAAMO,SAAU,YAIlB1B,KAAKX,uCASLmB,YAAclB,SAASC,cAAc,2CACtCiB,kBACK,IAAIC,MAAM,8CAGdmB,KAAO,CACTC,aAAcrB,YAAYH,QAAQwB,cAEhCC,eAAiBC,oBAAWM,UAAUT,MACxCE,gBACKjB,OAASiB,SAASjB,QAAU,QAC5BoB,WAAaH,SAASG,YAAc,wBASnB,GAAtBjC,KAAKa,OAAOD,cACNZ,KAAKqC,iBAGVxB,OAAOC,SAASK,cACXc,WAAajC,KAAKiC,WAAWK,KAAIb,MAAQc,gBAAgBd,QAE/DQ,WAAWnB,SAASW,OAChBA,KAAKe,SAAWf,KAAKH,OAASH,MAAMM,QAEnCQ,WAAWQ,MAAKhB,MAAQA,KAAKH,OAASH,MAAMM,SAC7CQ,WAAW,GAAGO,UAAW,GAE7BrB,MAAMc,WAAaA,yCASjBjC,KAAK0C,oBACLlC,YAAclB,SAASC,cAAc,4EACtCiB,kBACK,IAAIC,MAAM,8CAGdkC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,iCAAkC,CAClFjC,OAAQb,KAAKa,4BAEPkC,oBAAoBvC,YAAamC,KAAMC"}